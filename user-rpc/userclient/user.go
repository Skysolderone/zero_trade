// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: user.proto

package userclient

import (
	"context"

	"trade/user-rpc/pb/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	InfoReq   = user.InfoReq
	LoginReq  = user.LoginReq
	LoginResp = user.LoginResp
	Resp      = user.Resp
	UserInfo  = user.UserInfo

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*Resp, error)
		GetUserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) Register(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*Resp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) GetUserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}
